{"version":3,"file":"static/js/4000.36265f58.chunk.js","mappings":"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","sources":["../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-header-col-span.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-matching-table-rows-or-columns.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-filtered-table-rows.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-flattened-table-rows.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-merged-table-rows.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-merged-table-rows-or-columns-details.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-table-dimension-items-array.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-table-rows-or-columns-array.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-table-rows-updated-with-columns-metadata.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-table-subtitle.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/draw-analytics-table-helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-merged-table-columns.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-table-header-rows.helper.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/table-item-cell/table-item-cell.component.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/helper/get-data-values-from-analytics.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/Components/table-item/table-item.component.js","../../../../shared/build/es/components/ScorecardView/components/ScorecardTable/Components/TableCellAnalysis/Components/TableAnalysis/index.js"],"sourcesContent":["import { filter, last } from \"lodash\";\nexport function getHeaderColSpan(tableRowHeaders) {\n  const lastHeaders = last(tableRowHeaders);\n  const secondLastHeader = filter(tableRowHeaders[tableRowHeaders.length - 2] || [], tableRowHeader => !tableRowHeader.colSpan);\n  return secondLastHeader.length + lastHeaders.length;\n}","import { filter } from \"lodash\";\nexport function getMatchingTableRowsOrColumns(tableDataRowOrColumn) {\n  return filter(filter(tableDataRowOrColumn, tableDataCell => tableDataCell.dataRowIds));\n}","/* eslint-disable import/named */\nimport { filter } from \"lodash\";\nimport { getFlattenedTableRows } from \"./get-flattened-table-rows.helper\";\nimport { getMatchingTableRowsOrColumns } from \"./get-matching-table-rows-or-columns.helper\";\nexport function getFilteredTableRows(tableDataRows, dxGroupMembers) {\n  return filter(getFlattenedTableRows(tableDataRows), tableDataRow => getMatchingTableRowsOrColumns(tableDataRow, dxGroupMembers).length > 0);\n}","import { filter, find, first, flatten, map, uniq, uniqBy } from \"lodash\";\nexport function getFlattenedTableRows(tableDataRows) {\n  let firstDataColumns = [];\n  return map(tableDataRows, tableRows => {\n    firstDataColumns = [...firstDataColumns, first(tableRows)];\n    const dataPaths = uniq(flatten(map(tableRows, tableCell => tableCell.path ? tableCell.path.split(\"/\") : [])));\n    return uniqBy([...filter(map(dataPaths, dataPath => find(firstDataColumns, [\"id\", dataPath])), dataCell => dataCell), ...tableRows], \"id\");\n  });\n}","import { map } from \"lodash\";\nimport { getMergedTableRowsOrColumnsDetails } from \"./get-merged-table-rows-or-columns-details.helper\";\nexport function getMergedTableRows(tableDataRows, dxGroupMembers) {\n  const {\n    availableParent,\n    mergedDataRowsOrColumnsArray\n  } = getMergedTableRowsOrColumnsDetails(tableDataRows, dxGroupMembers);\n  return map(mergedDataRowsOrColumnsArray, mergedDataRows => map(mergedDataRows, mergedDataCell => {\n    return {\n      ...mergedDataCell,\n      rowSpan: availableParent[mergedDataCell.id]\n    };\n  }));\n}","import { filter, map } from \"lodash\";\nimport { getFilteredTableRows } from \"./get-filtered-table-rows.helper\";\nexport function getMergedTableRowsOrColumnsDetails(tableDataRowsOrColumns, dxGroupMembers) {\n  const availableParent = {};\n  const mergedDataRowsOrColumnsArray = map(getFilteredTableRows(tableDataRowsOrColumns, dxGroupMembers), filteredDataRow => filter(map(filteredDataRow, filterDataCell => {\n    if (!availableParent[filterDataCell.id]) {\n      if (filterDataCell.id) {\n        availableParent[filterDataCell.id] = 1;\n      }\n      return filterDataCell;\n    }\n    availableParent[filterDataCell.id] = availableParent[filterDataCell.id] + 1;\n    return null;\n  }), dataCell => dataCell));\n  return {\n    availableParent,\n    mergedDataRowsOrColumnsArray\n  };\n}","import { map } from \"lodash\";\nexport function getTableDimensionItemsArray(dimensionItems, analyticsObject) {\n  return map(dimensionItems, dimensionItem => {\n    const metadataIds = analyticsObject.metaData[dimensionItem];\n    return map(metadataIds || [], metadataId => {\n      const metadataName = analyticsObject && analyticsObject.metaData && analyticsObject.metaData.names ? analyticsObject.metaData.names[metadataId] : \"\";\n      return {\n        id: metadataId,\n        name: metadataName\n      };\n    });\n  });\n}","import { range, each, map, reduce, slice, join, flatten, last } from \"lodash\";\nexport function getTableRowsOrColumnsArray(dataItemsArray, dimension) {\n  let flatDataItemsArray = [];\n  each(range(dataItemsArray.length), dataItemArrayIndex => {\n    if (flatDataItemsArray.length === 0) {\n      if (dimension === \"row\") {\n        each(dataItemsArray[dataItemArrayIndex], rowsItem => {\n          flatDataItemsArray = [...flatDataItemsArray, [{\n            ...rowsItem,\n            column: 0,\n            path: rowsItem.id\n          }]];\n        });\n      } else {\n        flatDataItemsArray = [...flatDataItemsArray, map(dataItemsArray[dataItemArrayIndex], dataItem => {\n          return {\n            ...dataItem,\n            path: dataItem.id,\n            textCenter: true,\n            colSpan: reduce(map(slice(dataItemsArray, dataItemArrayIndex + 1), slicedDataItemsArray => slicedDataItemsArray.length), (product, count) => product * count)\n          };\n        })];\n      }\n    } else {\n      let innerFlatDataItemsArray = [];\n      each(flatDataItemsArray, flatDataItems => {\n        const path = join(map(flatDataItems, dataItemObject => dataItemObject.id), \"/\");\n        if (dimension === \"row\") {\n          each(dataItemsArray[dataItemArrayIndex], (dataItem, dataItemIndex) => {\n            if (dataItemIndex === 0) {\n              innerFlatDataItemsArray = [...innerFlatDataItemsArray, [...map(flatDataItems, flatDataItem => {\n                const span = reduce(map(slice(dataItemsArray, flatDataItem.column + 1, dataItemArrayIndex + 1), itemArray => itemArray.length), (product, count) => product * count);\n                return {\n                  ...flatDataItem,\n                  path: flatDataItem.path ? flatDataItem.path : path,\n                  [dimension === \"row\" ? \"rowSpan\" : \"colSpan\"]: span\n                };\n              }), {\n                ...dataItem,\n                path: `${path}/${dataItem.id}`,\n                column: dataItemArrayIndex\n              }]];\n            } else {\n              innerFlatDataItemsArray = [...innerFlatDataItemsArray, [{\n                ...dataItem,\n                path: `${path}/${dataItem.id}`,\n                column: dataItemArrayIndex\n              }]];\n            }\n          });\n        }\n      });\n      if (dimension === \"column\") {\n        const flatDataItems = last(flatDataItemsArray);\n        innerFlatDataItemsArray = [...flatDataItemsArray, flatten(map(range(flatDataItems.length), flatDataItemCount => {\n          const previousPath = flatDataItems[flatDataItemCount].path;\n          return map(dataItemsArray[dataItemArrayIndex], dataItem => {\n            const path = `${previousPath}/${dataItem.id}`;\n            return {\n              ...dataItem,\n              path,\n              dataRowIds: path.split(\"/\"),\n              textCenter: true,\n              colSpan: reduce(map(slice(dataItemsArray, dataItemArrayIndex + 1), slicedDataItemsArray => slicedDataItemsArray.length), (product, count) => product * count)\n            };\n          });\n        }))];\n      }\n      flatDataItemsArray = innerFlatDataItemsArray;\n    }\n  });\n  return flatDataItemsArray;\n}","import { map, last } from \"lodash\";\nexport function getTableRowsUpdatedWithColumnsMetadata(tableConfiguration, tableRowsArray, tableColumnsArray) {\n  return map(tableRowsArray, tableRow => {\n    return [...tableRow, ...map(last(tableColumnsArray), tableDataCell => {\n      const lastTableRow = last(tableRow);\n      const rowPaths = lastTableRow && lastTableRow.path ? lastTableRow.path.split(\"/\") : [];\n      const columnPaths = tableDataCell && tableDataCell.path ? tableDataCell.path.split(\"/\") : [];\n      const dataRowIds = [...rowPaths, ...columnPaths];\n      return {\n        id: dataRowIds.join(\"_\"),\n        isDataCell: true,\n        dataDimensions: [...tableConfiguration.row, ...tableConfiguration.column],\n        dataRowIds\n      };\n    })];\n  });\n}","import { map } from \"lodash\";\nexport function getTableSubtitle(tableConfiguration, analyticsObject) {\n  return map(tableConfiguration.filter, filter => map(analyticsObject && analyticsObject.metaData ? analyticsObject.metaData[filter] || [] : [], itemId => analyticsObject && analyticsObject.metaData && analyticsObject.metaData.names ? analyticsObject.metaData.names[itemId] || [] : []).join(\", \")).join(\" - \");\n}","import { getHeaderColSpan } from \"./get-header-col-span.helper\";\nimport { getMergedTableColumns } from \"./get-merged-table-columns.helper\";\nimport { getMergedTableRows } from \"./get-merged-table-rows.helper\";\nimport { getTableDimensionItemsArray } from \"./get-table-dimension-items-array.helper\";\nimport { getTableHeaderRows } from \"./get-table-header-rows.helper\";\nimport { getTableRowsOrColumnsArray } from \"./get-table-rows-or-columns-array.helper\";\nimport { getTableRowsUpdatedWithColumnsMetadata } from \"./get-table-rows-updated-with-columns-metadata.helper\";\nimport { getTableSubtitle } from \"./get-table-subtitle.helper\";\nexport default function drawBnaTable(analyticsObject, tableConfiguration) {\n  // const dataSelectionGroupMembers = getDataSelectionGroupMembers(\n  //   tableConfiguration,\n  // )\n\n  // Get table rows\n\n  const tableRowsArray = getTableRowsOrColumnsArray(getTableDimensionItemsArray(tableConfiguration.row, analyticsObject), \"row\");\n\n  // // Get table columns\n  const tableColumnsArray = getMergedTableColumns(getTableRowsOrColumnsArray(getTableDimensionItemsArray(tableConfiguration.column, analyticsObject), \"column\")\n  // dataSelectionGroupMembers\n  );\n  const headers = getTableHeaderRows(tableRowsArray[0], tableColumnsArray, analyticsObject, tableConfiguration);\n  return {\n    title: tableConfiguration.title,\n    subtitle: getTableSubtitle(tableConfiguration, analyticsObject),\n    headers,\n    headerColSpan: getHeaderColSpan(headers),\n    rows: getMergedTableRows(getTableRowsUpdatedWithColumnsMetadata(tableConfiguration, tableRowsArray, tableColumnsArray)\n    // dataSelectionGroupMembers\n    )\n  };\n}","/* eslint-disable import/named */\nimport { each, filter, map } from \"lodash\";\nimport { getMatchingTableRowsOrColumns } from \"./get-matching-table-rows-or-columns.helper\";\nexport function getMergedTableColumns(tableDataColumns, dxGroupMembers) {\n  const availableParent = {};\n  const mergedTableColumnsArray = map(tableDataColumns, tableDataRow => {\n    const matchingTableColumns = getMatchingTableRowsOrColumns(tableDataRow, dxGroupMembers);\n    each(matchingTableColumns, matchingTableColumn => {\n      each(filter(matchingTableColumn.dataRowIds, dataRowId => dataRowId !== matchingTableColumn.id), dataRowId => {\n        if (availableParent[dataRowId]) {\n          availableParent[dataRowId] = availableParent[dataRowId] + 1;\n        } else {\n          availableParent[dataRowId] = 1;\n        }\n      });\n    });\n    return matchingTableColumns.length > 0 ? matchingTableColumns : tableDataRow;\n  });\n  return map(mergedTableColumnsArray, mergedDataColumns => map(mergedDataColumns, mergedDataCell => {\n    return {\n      ...mergedDataCell,\n      colSpan: availableParent[mergedDataCell.id]\n    };\n  }));\n}","import { each, map } from \"lodash\";\n\n// eslint-disable-next-line max-params\nexport function getTableHeaderRows(tableRow, tableColumnsArray, analyticsObject, tableConfiguration) {\n  let tableHeaderRows = [];\n  each(tableColumnsArray, (tableColumn, tableColumnIndex) => {\n    const newTableColumn = map(tableColumn, (tableColumnCell, tableColumnCellIndex) => {\n      const columnDimension = tableConfiguration.column[tableColumnCellIndex];\n      return {\n        ...tableColumnCell,\n        dimension: columnDimension,\n        name: tableColumnCell.name\n      };\n    });\n    if (tableColumnIndex === 0) {\n      tableHeaderRows = [...tableHeaderRows, [...map(tableRow, (tableRowCell, tableRowCellIndex) => {\n        const rowDimension = tableConfiguration.row[tableRowCellIndex];\n        return {\n          ...tableRowCell,\n          dimension: rowDimension,\n          name: analyticsObject.metaData.names[rowDimension],\n          rowSpan: tableColumnsArray.length\n        };\n      }), ...newTableColumn]];\n    } else {\n      tableHeaderRows = [...tableHeaderRows, newTableColumn];\n    }\n  });\n  return tableHeaderRows;\n}","/* eslint-disable import/order */\nimport React, { useEffect, useState } from \"react\";\nimport \"./table-item-cell.component.css\";\nimport { findDataValuesFromAnalytics } from \"../helper/get-data-values-from-analytics\";\nimport PropTypes from \"prop-types\";\nexport default function TableItemCellComponent({\n  analyticsObject,\n  dataRowIds\n}) {\n  const [dataValue, setDataValue] = useState(0);\n  useEffect(() => {\n    setDataValue(findDataValuesFromAnalytics(analyticsObject, dataRowIds));\n  }, [analyticsObject, dataRowIds]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-item-cell\",\n    style: {\n      backgroundColor: dataValue !== \"\" ? \"#ffffff\" : \"#eeeeee\"\n    }\n  }, dataValue, /*#__PURE__*/React.createElement(\"div\", null, \"\\xA0\"));\n}\nTableItemCellComponent.propTypes = {\n  analyticsObject: PropTypes.object.isRequired,\n  dataRowIds: PropTypes.array.isRequired\n};","import { filter, find, intersection, map } from \"lodash\";\nexport function findDataValuesFromAnalytics(analyticsObject, dataRowIds) {\n  const analyticsHeaders = analyticsObject ? analyticsObject.headers || [] : [];\n  const dataIndex = analyticsHeaders.indexOf(find(analyticsHeaders, [\"name\", \"value\"]));\n  return filter(map(filter(analyticsObject ? analyticsObject.rows || [] : [], row => intersection(dataRowIds, row).length === dataRowIds.length), dataRow => parseFloat(dataRow[dataIndex])), dataValue => !isNaN(dataValue));\n}","import React, { useMemo } from \"react\";\nimport \"./table-item.component.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { DataState } from \"../../../../state/data\";\nimport { LayoutState } from \"../../../../state/layout\";\nimport drawBnaTable from \"../helper/draw-analytics-table-helper\";\nimport TableItemCellComponent from \"../table-item-cell/table-item-cell.component\";\nexport default function TableItemComponent() {\n  const data = useRecoilValue(DataState);\n  const layout = useRecoilValue(LayoutState);\n  const tableData = useMemo(() => {\n    return drawBnaTable(data[\"_data\"], layout);\n  }, [data, layout]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-item-container\"\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-bordered\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, (tableData === null || tableData === void 0 ? void 0 : tableData.subtitle) !== \" \" ? /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: tableData === null || tableData === void 0 ? void 0 : tableData.headerColSpan,\n    className: \"table-header-cell\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-header-item\"\n  }, tableData === null || tableData === void 0 ? void 0 : tableData.subtitle))) : null, tableData === null || tableData === void 0 ? void 0 : tableData.headers.map((tableHeaderRow, tableHeaderRowPosition) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: tableHeaderRowPosition\n    }, tableHeaderRow.map((tableHeaderCell, tableHeaderCellPosition) => {\n      return /*#__PURE__*/React.createElement(\"th\", {\n        className: \"table-header-cell\",\n        key: tableHeaderCellPosition,\n        rowSpan: tableHeaderCell.rowSpan,\n        colSpan: tableHeaderCell.colSpan,\n        style: {\n          textAlign: tableHeaderCell.textCenter ? \"center\" : \"left\"\n        }\n      }, tableHeaderCell.name);\n    }));\n  })), /*#__PURE__*/React.createElement(\"tbody\", null, tableData === null || tableData === void 0 ? void 0 : tableData.rows.map((tableRow, tableRowPosition) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: \"table-row\" + tableRowPosition\n    }, tableRow.map((tableCell, tableCellPosition) => {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"table-item-cell-block\",\n        key: \"table-row-item-cell\" + tableCellPosition,\n        rowSpan: tableCell.rowSpan\n      }, !tableCell.isDataCell ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"table-item-cell-label\",\n        key: \"tableCellPosition\" + tableCellPosition\n      }, tableCell.name) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"table-item-cell-data\",\n        key: \"tableCellPosition\" + tableCellPosition\n      }, /*#__PURE__*/React.createElement(TableItemCellComponent, {\n        analyticsObject: data[\"_data\"],\n        dataRowIds: tableCell.dataRowIds\n      })));\n    }));\n  }))));\n}","import React from \"react\";\nimport TableItemComponent from \"./Components/table-item/table-item.component\";\nexport default function TableAnalysis() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column align-items-center\",\n    style: {\n      height: \"100%\"\n    }\n  }, /*#__PURE__*/React.createElement(TableItemComponent, {\n    width: \"100%\"\n  }));\n}"],"names":["getHeaderColSpan","tableRowHeaders","lastHeaders","last","filter","length","tableRowHeader","colSpan","getMatchingTableRowsOrColumns","tableDataRowOrColumn","tableDataCell","dataRowIds","getFilteredTableRows","tableDataRows","dxGroupMembers","firstDataColumns","map","tableRows","first","dataPaths","uniq","flatten","tableCell","path","split","uniqBy","dataPath","find","dataCell","getFlattenedTableRows","tableDataRow","getMergedTableRows","availableParent","mergedDataRowsOrColumnsArray","tableDataRowsOrColumns","filteredDataRow","filterDataCell","id","getMergedTableRowsOrColumnsDetails","mergedDataRows","mergedDataCell","rowSpan","getTableDimensionItemsArray","dimensionItems","analyticsObject","dimensionItem","metadataIds","metaData","metadataId","name","names","getTableRowsOrColumnsArray","dataItemsArray","dimension","flatDataItemsArray","each","range","dataItemArrayIndex","rowsItem","column","dataItem","textCenter","reduce","slice","slicedDataItemsArray","product","count","innerFlatDataItemsArray","flatDataItems","join","dataItemObject","dataItemIndex","flatDataItem","span","itemArray","flatDataItemCount","previousPath","getTableRowsUpdatedWithColumnsMetadata","tableConfiguration","tableRowsArray","tableColumnsArray","tableRow","lastTableRow","isDataCell","dataDimensions","row","getTableSubtitle","itemId","drawBnaTable","tableDataColumns","mergedTableColumnsArray","matchingTableColumns","matchingTableColumn","dataRowId","mergedDataColumns","getMergedTableColumns","headers","tableHeaderRows","tableColumn","tableColumnIndex","newTableColumn","tableColumnCell","tableColumnCellIndex","columnDimension","tableRowCell","tableRowCellIndex","rowDimension","getTableHeaderRows","title","subtitle","headerColSpan","rows","TableItemCellComponent","dataValue","setDataValue","useState","useEffect","analyticsHeaders","dataIndex","indexOf","intersection","dataRow","parseFloat","isNaN","findDataValuesFromAnalytics","React","className","style","backgroundColor","TableItemComponent","data","useRecoilValue","DataState","layout","LayoutState","tableData","useMemo","tableHeaderRow","tableHeaderRowPosition","key","tableHeaderCell","tableHeaderCellPosition","textAlign","tableRowPosition","tableCellPosition","TableAnalysis","height","width","propTypes","PropTypes","isRequired"],"sourceRoot":""}